y <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
print(likelihoodVonMises(y, 0.1, 2.39))
print(likelihoodVonMises(y, 0.1, 2.39))
likelihoodVonMises <- function(y, k, my) {
return(
prod(
exp(k*cos(y-my))/(2*pi*besselI(k, nu=0))
)
)
}
y <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
print(likelihoodVonMises(y, 0.1, 2.39))
kapa <- seq(0, 10, 0.01)
kapa.values <- seq(0, 10, 0.01)
kapa.prior <- dexp(-kapa.value)
kapa.prior <- dexp(-kapa.values)
plot(kapa.prior)
kapa.prior <- dexp(kapa.values)
plot(kapa.prior)
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
kapa.prior <- dexp(kapa.values)
y.kapa.likelihood <- likelihoodVonMises(y.values, kapa.values, my)
likelihoodVonMises <- function(y, k, my) {
return(
prod(
exp(k%*%cos(y-my))/(2*pi*besselI(k, nu=0))
)
)
}
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
kapa.prior <- dexp(kapa.values)
y.kapa.likelihood <- likelihoodVonMises(y.values, kapa.values, my)
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.1)
my <- 2.39
kapa.prior <- dexp(kapa.values)
y.kapa.likelihood <- likelihoodVonMises(y.values, kapa.values, my)
likelihoodVonMises <- function(y, k, my) {
return(
prod(
exp(k*cos(y-my))/(2*pi*besselI(k, nu=0))
)
)
}
kapa.prior <- dexp(kapa.values)
y.kapa.likelihood <- likelihoodVonMises(y.values, kapa.values, my)
print(likelihoodVonMises(y, 0.1, 2.39))
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
kapa.prior <- dexp(kapa.values)
y.kapa.likelihood <- likelihoodVonMises(y.values, kapa.values, my)
likelihoodVonMises <- function(y, k, my) {
return(
exp(k*cos(y-my))/(2*pi*besselI(k, nu=0))
)
}
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
kapa.prior <- dexp(kapa.values)
y.kapa.likelihood <- likelihoodVonMises(y.values, kapa.values, my)
plot(y.kapa.likelihood)
print(cos(y-my))
likelihoods = numeric()
for(k in kapa.values) {
likelihoods.append(1)
}
likelihoods = numeric()
i = 1
for(k in kapa.values) {
likelihoods[i] = likelihoodVonMises(y.values, k, my)
i = i + 1
}
likelihoods
plot(likelihoods)
warn
warnings()
# a)
likelihoodVonMises <- function(y, k, my) {
return(prod(exp(k*cos(y-my))/(2*pi*besselI(k, nu=0))))
}
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
kapa.prior <- dexp(kapa.values)
likelihoods = numeric()
i = 1
for(k in kapa.values) {
likelihoods[i] = likelihoodVonMises(y.values, k, my)
i = i + 1
}
y.kapa.likelihood <- likelihoodVonMises(y.values, kapa.values, my)
plot(y.kapa.likelihood)
plot(likelihoods)
# a)
likelihoodVonMises <- function(y, k, my) {
return(prod(exp(k*cos(y-my))/(2*pi*besselI(k, nu=0))))
}
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
kapa.prior <- dexp(kapa.values)
likelihoods = numeric()
i = 1
for(k in kapa.values) {
likelihoods[i] = likelihoodVonMises(y.values, k, my)
i = i + 1
}
plot(likelihoods)
posterior = likelihoods * kapa.prior
plot(posterior)
plot(kapa.values, posterior)
print(max(posterior))
print(kapa.values[which(max(posterior))])
print(kapa.values[which(posterior, max(posterior))])
plot(kapa.values, posterior)
posterior = likelihoods * kapa.prior
plot(kapa.values, posterior)
print(posterior)
print(max(posterior)$index)
print(which.max(posterior))
max.posterior = which.max(posterior)
kapa.max.posterior = kapa.values[max.posterior]
kapa.max.posterior
# a)
# Input: y-vector, one kapa value, my
# Output: vonMises probability of input. Returns a scalar
likelihoodVonMises <- function(y, k, my) {
return(prod(exp(k*cos(y-my))/(2*pi*besselI(k, nu=0))))
}
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
# Vector of prior values, given kapas
kapa.prior <- dexp(kapa.values)
# Calculate likelihood for each kapa, given y-vector
likelihoods = numeric()
i = 1
for(k in kapa.values) {
likelihoods[i] = likelihoodVonMises(y.values, k, my)
i = i + 1
}
posterior = likelihoods * kapa.prior # Vector of posterior values
plot(kapa.values, posterior)
plot(kapa.values, posterior, type='l') # Plot
asdasdasd <- likelihoodVonMises(y.values, kapa.values, my)
asdasdasd <- likelihood2VonMises(y.values, kapa.values, my)
likelihood2VonMises <- function(y, k, my) {
return(
prod(
exp(k*t(cos(y-my)))/(2*pi*besselI(k, nu=0))
)
)
}
asdasdasd <- likelihood2VonMises(y.values, kapa.values, my)
likelihood2VonMises <- function(y, k, my) {
return(
prod(
exp(t(k)*cos(y-my))/(2*pi*besselI(k, nu=0))
)
)
}
asdasdasd <- likelihood2VonMises(y.values, kapa.values, my)
# a)
# Input: y-vector, one kapa value, my
# Output: vonMises probability of input. Returns a scalar
likelihoodVonMises <- function(y, k, my) {
return(prod(exp(k*cos(y-my))/(2*pi*besselI(k, nu=0))))
}
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
# Vector of prior values, given kapas
kapa.prior <- dexp(kapa.values)
# Calculate likelihood for each kapa, given y-vector
likelihoods = numeric()
i = 1
for(k in kapa.values) {
likelihoods[i] = likelihoodVonMises(y.values, k, my)
i = i + 1
}
posterior = likelihoods * kapa.prior # Vector of posterior values
plot(kapa.values, posterior, type='l') # Plot
# b)
max.posterior = which.max(posterior) # Find maximum posterior value
kapa.max.posterior = kapa.values[max.posterior] # Find maximum kapa value given max value in posterior
# Max kapa: 2.12
posterior_CI = apply(X = posterior_y, MARGIN=2, FUN=function(x) quantile(x,c(0.05, 0.95), na.rm=T))
lines(data$time, posterior_CI[2,], col="green")
lines(data$time, posterior_CI[1,], col="green")
# Lab 2 Task 1
# Linear and polynomial regression
## Setup
data = read.table("TempLinkoping.txt", header=TRUE)
library(MASS)
## Implementation
# a)
# my0
B0 = -5 # prior knowledge: Mean temp of -5 degrees 1st of January
B1 = 20 # curve for 20 degrees in 30th of June
B2 = 60 # curve for 20 degrees in 30th of June
my0 = c(B0, B1, B2)
curve(-5+B1*x+B2*x^2)
points(data) # for comparision
# sigma0
sigma2_0 = 12.5771 # diff within 7 degress 95% of the cases, results in sigma of 7/1.96 --> sigma0 = 12.5771
# v0
v0 = 60 # we have lived long
# omega0
omega0 = diag(c(0.5, 0.1, 0.1)) # more certain about B0 than the others
# b)
# new hyper parameters
B0 = -5
B1 = 100
B2 = -100
my0 = c(B0, B1, B2)
sigma2_0 = 2
v0 = 100
omega0 = diag(c(0.5, 0.5, 0.5))
nDraws = 1000
# simulation
chi2 = rchisq(v0, n=nDraws)
sigma2_draws = v0*sigma2_0/chi2
omega0_inv = solve(omega0)
B_draws = matrix(0, nDraws, 3)
# start new plot
plot.new()
plot.window(xlim=c(0,1), ylim=c(-20,30))
axis(side=1)
axis(side=2)
# simulate draws
for(i in 1:nDraws){
B_draws[i,] = mvrnorm(n = 1, mu = my0, Sigma=sigma2_draws[i]*omega0_inv)
lines(data$time, B_draws[i,1]+B_draws[i,2]*data$time+B_draws[i,3]*data$time^2, col=rgb(0,0,0,0.1))
}
lines(data$time, mean(B_draws[,1])+mean(B_draws[,2])*data$time+mean(B_draws[,3])*data$time^2, col=rgb(1,0,0,1))
# c)
B0 = -5
B1 = 100
B2 = -100
my0 = c(B0, B1, B2)
sigma2_0 = 2
v0 = 100
omega0 = diag(c(0.5, 0.5, 0.5))
X = cbind(1, data$time, I(data$time)^2)
Y = data$temp
B_hat = solve(t(X)%*%X)%*%t(X)%*%Y
# n
myn = solve((t(X)%*%X+omega0)) %*% (t(X)%*%X%*%B_hat + omega0 %*% my0)
omegan = t(X)%*%X + omega0
omegan_inv = solve(omegan)
vn = v0 + dim(X)[1]
sigma2_n = ((v0*sigma2_0 + t(Y)%*%Y + t(my0)%*%omega0%*%my0 - t(myn)%*%omegan%*%myn)/vn)[1,1]
# Posterior draws
chi2_n = rchisq(vn, n=nDraws)
sigma2_draws = vn*sigma2_n/chi2_n
beta_draws = matrix(0, nDraws, 3)
plot(data)
posterior_y = matrix(0, nDraws, 366)
for (i in 1:nDraws) {
beta_draws[i,] = mvrnorm(n = 1, mu = myn, Sigma = sigma2_draws[i]*omegan_inv)
lines(data$time, beta_draws[i,1] + beta_draws[i,2]*data$time + beta_draws[i,3]*data$time^2, col=rgb(0,0,0,0.1))
posterior_y[i,] = beta_draws[i,1] + beta_draws[i,2]*data$time + beta_draws[i,3]*data$time^2
}
posterior_CI = apply(X = posterior_y, MARGIN=2, FUN=function(x) quantile(x,c(0.05, 0.95), na.rm=T))
lines(data$time, posterior_CI[2,], col="green")
lines(data$time, posterior_CI[1,], col="green")
setwd("~/TDDE07/lab2")
# Lab 2 Task 1
# Linear and polynomial regression
## Setup
data = read.table("TempLinkoping.txt", header=TRUE)
library(MASS)
## Implementation
# a)
# my0
B0 = -5 # prior knowledge: Mean temp of -5 degrees 1st of January
B1 = 20 # curve for 20 degrees in 30th of June
B2 = 60 # curve for 20 degrees in 30th of June
my0 = c(B0, B1, B2)
curve(-5+B1*x+B2*x^2)
points(data) # for comparision
# sigma0
sigma2_0 = 12.5771 # diff within 7 degress 95% of the cases, results in sigma of 7/1.96 --> sigma0 = 12.5771
# v0
v0 = 60 # we have lived long
# omega0
omega0 = diag(c(0.5, 0.1, 0.1)) # more certain about B0 than the others
# b)
# new hyper parameters
B0 = -5
B1 = 100
B2 = -100
my0 = c(B0, B1, B2)
sigma2_0 = 2
v0 = 100
omega0 = diag(c(0.5, 0.5, 0.5))
nDraws = 1000
# simulation
chi2 = rchisq(v0, n=nDraws)
sigma2_draws = v0*sigma2_0/chi2
omega0_inv = solve(omega0)
B_draws = matrix(0, nDraws, 3)
# start new plot
plot.new()
plot.window(xlim=c(0,1), ylim=c(-20,30))
axis(side=1)
axis(side=2)
# simulate draws
for(i in 1:nDraws){
B_draws[i,] = mvrnorm(n = 1, mu = my0, Sigma=sigma2_draws[i]*omega0_inv)
lines(data$time, B_draws[i,1]+B_draws[i,2]*data$time+B_draws[i,3]*data$time^2, col=rgb(0,0,0,0.1))
}
lines(data$time, mean(B_draws[,1])+mean(B_draws[,2])*data$time+mean(B_draws[,3])*data$time^2, col=rgb(1,0,0,1))
# c)
B0 = -5
B1 = 100
B2 = -100
my0 = c(B0, B1, B2)
sigma2_0 = 2
v0 = 100
omega0 = diag(c(0.5, 0.5, 0.5))
X = cbind(1, data$time, I(data$time)^2)
Y = data$temp
B_hat = solve(t(X)%*%X)%*%t(X)%*%Y
# n
myn = solve((t(X)%*%X+omega0)) %*% (t(X)%*%X%*%B_hat + omega0 %*% my0)
omegan = t(X)%*%X + omega0
omegan_inv = solve(omegan)
vn = v0 + dim(X)[1]
sigma2_n = ((v0*sigma2_0 + t(Y)%*%Y + t(my0)%*%omega0%*%my0 - t(myn)%*%omegan%*%myn)/vn)[1,1]
# Posterior draws
chi2_n = rchisq(vn, n=nDraws)
sigma2_draws = vn*sigma2_n/chi2_n
beta_draws = matrix(0, nDraws, 3)
plot(data)
posterior_y = matrix(0, nDraws, 366)
for (i in 1:nDraws) {
beta_draws[i,] = mvrnorm(n = 1, mu = myn, Sigma = sigma2_draws[i]*omegan_inv)
lines(data$time, beta_draws[i,1] + beta_draws[i,2]*data$time + beta_draws[i,3]*data$time^2, col=rgb(0,0,0,0.1))
posterior_y[i,] = beta_draws[i,1] + beta_draws[i,2]*data$time + beta_draws[i,3]*data$time^2
}
posterior_CI = apply(X = posterior_y, MARGIN=2, FUN=function(x) quantile(x,c(0.05, 0.95), na.rm=T))
lines(data$time, posterior_CI[2,], col="green")
lines(data$time, posterior_CI[1,], col="green")
plot(data)
time_star = numeric()
posterior_y = numeric()
for (i in 1:nDraws) {
beta_draw = mvrnorm(n = 1, mu = myn, Sigma = sigma2_draws[i]*omegan_inv)
time_star = (-beta_draw[2])/(2*beta_draw[3])
posterior_y = beta_draw[1] + beta_draw[2]*time_star + beta_draw[3]*time_star^2
}
plot(time_star, posterior_y)
hist(time_star, posterior_y)
hist(posterior_y)
head(posterior_y)
1)/(2*B_2)
plot(data)
time_star = numeric()
posterior_y = numeric()
for (i in 1:nDraws) {
beta_draw = mvrnorm(n = 1, mu = myn, Sigma = sigma2_draws[i]*omegan_inv)
time_star[i] = (-beta_draw[2])/(2*beta_draw[3])
posterior_y[i] = beta_draw[1] + beta_draw[2]*time_star + beta_draw[3]*time_star^2
}
time_* = (-B_1)/(2*B_2)
plot(data)
time_star = numeric()
posterior_y = numeric()
for (i in 1:nDraws) {
beta_draw = mvrnorm(n = 1, mu = myn, Sigma = sigma2_draws[i]*omegan_inv)
time_star[i] = (-beta_draw[2])/(2*beta_draw[3])
posterior_y[i] = beta_draw[1] + beta_draw[2]*time_star + beta_draw[3]*time_star^2
}
# d)
# f'(time) = B_1 + 2*B_2*time = 0
# time_* = (-B_1)/(2*B_2)
plot(data)
time_star = numeric()
posterior_y = numeric()
for (i in 1:nDraws) {
beta_draw = mvrnorm(n = 1, mu = myn, Sigma = sigma2_draws[i]*omegan_inv)
time_star[i] = (-beta_draw[2])/(2*beta_draw[3])
posterior_y[i] = beta_draw[1] + beta_draw[2]*time_star + beta_draw[3]*time_star^2
}
plot(time_star, posterior_y)
hist(poserior_y)
hist(posterior_y)
density(posterior_y)
lines(density(posterior_y))
plot(density(posterior_y))
hist(posterior_y)
plot(density(posterior_y)*100)
plot(density(posterior_y*100))
plot(density(posterior_y*100))
hist(posterior_y)
hist(posterior_y)
linest(density(posterior_y*100))
hist(posterior_y)
lines(density(posterior_y*100))
lines(density(posterior_y/100))
hist(posterior_y)
lines(density(posterior_y/100))
lines(density(posterior_y*10))
hist(posterior_y)
lines(density(posterior_y*10))
lines(density(posterior_y))
plot(density(posterior_y))
plot(density(posterior_y)*100)
plot(density(posterior_y*100))
plot(density(posterior_y/100))
plot(time_star, posterior_y)
hist(posterior_y)
lines(density(posterior_y/100))
plot(density(posterior_y/100))
plot(density(time_star, posterior_y)
plot(density(time_star, posterior_y))
plot(density(time_star, posterior_y))
plot(time_star, posterior_y)
hist(posterior_y)
hist(posterior_y, breaks=100)
hist(posterior_y)
# time_* = (-B_1)/(2*B_2)
plot(data)
time_star = numeric()
posterior_y = numeric()
for (i in 1:nDraws) {
beta_draw = mvrnorm(n = 1, mu = myn, Sigma = sigma2_draws[i]*omegan_inv)
time_star[i] = (-beta_draw[2])/(2*beta_draw[3])
posterior_y[i] = beta_draw[1] + beta_draw[2]*time_star + beta_draw[3]*time_star^2
}
plot(time_star, posterior_y)
hist(posterior_y)
# time_* = (-B_1)/(2*B_2)
plot(data)
time_star = numeric()
posterior_y = numeric()
for (i in 1:nDraws) {
beta_draw = mvrnorm(n = 1, mu = myn, Sigma = sigma2_draws[i]*omegan_inv)
time_star[i] = (-beta_draw[2])/(2*beta_draw[3])
posterior_y[i] = beta_draw[1] + beta_draw[2]*time_star + beta_draw[3]*time_star^2
}
plot(time_star, posterior_y)
hist(posterior_y)
# time_* = (-B_1)/(2*B_2)
plot(data)
time_star = numeric()
posterior_y = numeric()
for (i in 1:nDraws) {
beta_draw = mvrnorm(n = 1, mu = myn, Sigma = sigma2_draws[i]*omegan_inv)
time_star[i] = (-beta_draw[2])/(2*beta_draw[3])
posterior_y[i] = beta_draw[1] + beta_draw[2]*time_star + beta_draw[3]*time_star^2
}
plot(time_star, posterior_y)
hist(posterior_y)
hist(posterior_y, breaks=10)
plot(time_star, posterior_y)
hist(posterior_y, breaks=10)
hist(posterior_y, breaks=20)
plot(time_star, posterior_y)
# d)
# f'(time) = B_1 + 2*B_2*time = 0
# time_* = (-B_1)/(2*B_2)
plot(data)
data = read.table("WomenWork.dat", header=TRUE)
data = read.table("WomenWork.dat", header=TRUE)
View(data)
library(glmModel)
library(glm)
# a)
glmModel <- glm(Work ~ 0 + ., data = data, family = binomial)
head(glmModel)
plot(glmModel$fitted.values)
plot(data$HusbandInc, data$EducYears, col=rgb(0,0,pred))
pred = glmModel$fitted.values > 0.5
plot(data$HusbandInc, data$EducYears, col=rgb(0,0,pred))
plot(data$HusbandInc, data$EducYears, col=rgb(0,1-pred,pred))
plot(data$NSmallChild, data$HusbandInc, col=rgb(0,1-pred,pred))
plot(data$NSmallChild, data$ExpYears2, col=rgb(0,1-pred,pred))
plot(data$NSmallChild, data$ExpYears2, col=rgb(0,1-pred,pred))
# Loading data from file
Data<-read.table("SpamReduced.dat",header=TRUE)  # Spam data from Hastie et al.
View(Data)
# Script to illustrate numerical maximization of the Logistic or Probit regression
###################################################################################
###########   BEGIN USER INPUTS   ################
Probit <- 0           # If Probit <-0, then logistic model is used.
chooseCov <- c(1:16)  # Here we choose which covariates to include in the model
tau <- 10000;         # Prior scaling factor such that Prior Covariance = (tau^2)*I
###########     END USER INPUT    ################
#install.packages("mvtnorm") # Loading a package that contains the multivariate normal pdf
library("mvtnorm") # This command reads the mvtnorm package into R's memory. NOW we can use dmvnorm function.
# Loading data from file
Data<-read.table("SpamReduced.dat",header=TRUE)  # Spam data from Hastie et al.
y <- as.vector(Data[,1]); # Data from the read.table function is a data frame. Let's convert y and X to vector and matrix.
X <- as.matrix(Data[,2:17]);
covNames <- names(Data)[2:length(names(Data))];
X <- X[,chooseCov]; # Here we pick out the chosen covariates.
covNames <- covNames[chooseCov];
nPara <- dim(X)[2];
# Setting up the prior
mu <- as.vector(rep(0,nPara)) # Prior mean vector
Sigma <- tau^2*diag(nPara);
View(Sigma)
