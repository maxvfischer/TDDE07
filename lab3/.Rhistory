model {
phi ~uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
}'
# perform MCMC
x.fit.03 = stan(model_code=ARStanModel, data=list(x=x.03, N=T))
x.fit.95 = stan(model_code=ARStanModel, data=list(x=x.95, N=T))
# extract summary
summary.03 = summary(x.fit.03)
summary.95 = summary(x.fit.95)
# extract n_eff
n_eff.03 = summary.03$summary[,"n_eff"]
n_eff.95 = summary.95$summary[,"n_eff"]
## number of effective samples (out of 4000):
n_eff.mu.03 = n_eff.03["mu"] #1345
n_eff.phi.03 = n_eff.03["phi"]# 1351
n_eff.sigma.03 = n_eff.03["sigma"] #1836
n_eff.mu.95 = n_eff.95["mu"] #1369
n_eff.phi.95 = n_eff.95["phi"] #1365
n_eff.sigma.95 = n_eff.95["sigma"] #1937
# extract params
x.params.03 = extract(x.fit.03)
x.params.95 = extract(x.fit.95)
## credible intervals
probs = c(0.025,0.975)
CI.mu.03 <- apply(as.matrix(x.params.03$mu), 2, quantile, probs=probs) # (9.709384, 10.208119)
CI.mu.95 <- apply(as.matrix(x.params.95$mu), 2, quantile, probs=probs) # (-5.017947, 21.271056)
CI.phi.03 <- apply(as.matrix(x.params.03$phi), 2, quantile, probs=probs) # (0.1847434, 0.4413590)
CI.phi.95 <- apply(as.matrix(x.params.95$phi), 2, quantile, probs=probs) # (0.7994717, 0.9406423)
CI.sigma.03 <- apply(as.matrix(x.params.03$sigma), 2, quantile, probs=probs) # (1.328897, 1.617287)
CI.sigma.95 <- apply(as.matrix(x.params.95$mu), 2, quantile, probs=probs) # (0.5284631, 1.9843986)
View(CI.phi.95)
mean(data.campy)
mean(data.campy[,1])
x.params.03$mu
x.params.03$sigma
data.campy = read.table("campy.dat", header=TRUE)
N = dim(data.campy)[1]
PoissonARStanModel = '
data {
int<lower=0> N;
vector[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma2;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
for (n in 1:N)
c[n] ~ poisson(exp(x[n]))
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
data.campy = read.table("campy.dat", header=TRUE)
N = dim(data.campy)[1]
PoissonARStanModel = '
data {
int<lower=0> N;
vector[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma2;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sqrt(sigma));
for (n in 1:N)
c[n] ~ poisson(exp(x[n]))
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
PoissonARStanModel = '
data {
int<lower=0> N;
vector[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma2;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sqrt(sigma2));
for (n in 1:N)
c[n] ~ poisson(exp(x[n]))
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
PoissonARStanModel = '
data {
int<lower=0> N;
vector[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma2;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sqrt(sigma2));
for (n in 1:N)
c[n] ~ poisson(exp(x[n]));
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
PoissonARStanModel = '
data {
int<lower=0> N;
vector[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma2;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sqrt(sigma2));
for (n in 1:N)
c[n] ~ poisson(exp(x[n]));
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
PoissonARStanModel = '
data {
int<lower=0> N;
vector[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma2;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sqrt(sigma2));
for (n in 1:N)
c[n] ~ poisson(exp(x[n]));
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
PoissonARStanModel = '
data {
int<lower=0> N;
vector[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma2;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sqrt(sigma2));
for (n in 1:N)
c[n] ~ poisson(exp(x[n]));
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
PoissonARStanModel = '
data {
int<lower=0> N;
vector[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
for (n in 1:N)
c[n] ~ poisson(exp(x[n]));
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
PoissonARStanModel = '
data {
int<lower=0> N;
vector[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
c ~ poisson(exp(x));
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
PoissonARStanModel = '
data {
int<lower=0> N;
int[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
for (n in 1:N)
c ~ poisson(exp(x));
}'
data = list(
y = data.campy,
N = N,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(x=x.03, N=T))
y.fit = stan(model_code=PoissonARStanModel, data=data)
y.fit = stan(model_code=PoissonARStanModel, data=list(
y = data.campy,
N = N,
))
data.campy
data.campy = read.table("campy.dat", header=TRUE)[1,]
data.campy
data.campy = read.table("campy.dat", header=TRUE)[,1]
data.campy
data.campy = read.table("campy.dat", header=TRUE)[,1]
N = length(data.campy)
data.campy
y.fit = stan(model_code=PoissonARStanModel, data=list(
c = data.campy,
N = N,
))
data.campy = read.table("campy.dat", header=TRUE)[,1]
N = length(data.campy)
PoissonARStanModel = '
data {
int<lower=0> N;
int[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
for (n in 1:N)
c ~ poisson(exp(x));
}'
y.fit = stan(model_code=PoissonARStanModel, data=list(
c = data.campy,
N = N,
))
PoissonARStanModel = '
data {
int<lower=0> N;
int[N] c;
}
parameters {
vector[N] x;
real mu;
real phi;
real<lower=0> sigma;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
for (n in 1:N)
c ~ poisson(exp(x[n]));
}'
y.fit = stan(model_code=PoissonARStanModel, data=list(
c = data.campy,
N = N,
))
y.fit = stan(
model_code=PoissonARStanModel,
data=list(
c = data.campy,
N = N,
)
)
help(stan)
y.fit = stan(
model_code=PoissonARStanModel,
data=list(
N = N,
c = data.campy,
)
)
list(
N = N,
c = data.campy,
)
y.fit = stan(model_code=PoissonARStanModel, data=list(N = N,c = data.campy)
)
y.fit = stan(model_code=PoissonARStanModel, data=list(N = N,c = data.campy)
y.fit = stan(model_code=PoissonARStanModel, data=list(N = N,c = data.campy))
PoissonARStanModel = '
data {
int<lower=0> N;
int[N] c;
}
parameters {
real mu;
real phi;
real<lower=0> sigma;
vector[N] x;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
for (n in 1:N)
c ~ poisson(exp(x[n]));
}'
y.fit = stan(model_code=PoissonARStanModel, data=list(N = N, c = data.campy))
N = length(data.campy)
N
data.campy = read.table("campy.dat", header=TRUE)[,1]
N = length(data.campy)
PoissonARStanModel = '
data {
int<lower=0> N;
int[N] c;
}
parameters {
real mu;
real phi;
real<lower=0> sigma;
vector[N] x;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
for (n in 1:N)
c ~ poisson(exp(x[n]));
}'
y.fit = stan(model_code=PoissonARStanModel, data=list(N = N, c = data.campy))
PoissonARStanModel = '
data {
int<lower=0> N;
int c[N];
}
parameters {
real mu;
real phi;
real<lower=0> sigma;
vector[N] x;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
// phi ~ normal(0, 0.6);
phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
for (n in 1:N)
c ~ poisson(exp(x[n]));
}'
y.fit = stan(model_code=PoissonARStanModel, data=list(N = N, c = data.campy))
c.fit
y.fit
plot(pairs(y.fit))
N = length(data.campy)
PoissonARStanModel = '
data {
int<lower=0> N;
int c[N];
}
parameters {
real mu;
real phi;
real<lower=0> sigma;
vector[N] x;
}
model {
// mu ~ normal();
// sigma2 ~ scaled_inv_chi_square();
phi ~ normal(0, 0.6);
// phi ~ uniform(-1,1);
for (n in 2:N)
x[n] ~ normal(mu + phi * (x[n-1] - mu), sigma);
for (n in 1:N)
c ~ poisson(exp(x[n]));
}'
c.fit = stan(model_code=PoissonARStanModel, data=list(N = N, c = data.campy))
c.fit
hist(c.fit$mu)
params = extract(c.fit)
hist(params$mu)
hist(params$mu)
par(mfrow=c(1,1))
c.fit = stan(model_code=PoissonARStanModel, data=list(N = N, c = data.campy))
hist(params$mu)
hist(params$mu, breaks=200)
hist(params$mu, breaks=2000)
hist(params$mu, breaks=200)
params = extract(c.fit)
hist(params$mu, breaks=200)
par(mfrow=c(1,1))
data.campy
N
par(mfrow=c(1,1))
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
c.fit = stan(model_code=PoissonARStanModel, data=list(N = N, c = data.campy))
par(mfrow=c(1,1))
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
c.fit = stan(model_code=PoissonARStanModel, data=list(N = N, c = data.campy))
